const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const admin = require('firebase-admin');
const path = require('path');
const serviceAccount = require('./oogiri-game-firebase-adminsdk-fbsvc-4c8e79b44b.json');

admin.initializeApp({
  credential: admin.credential.cert(serviceAccount)
});
const db = admin.firestore();

const app = express();
app.use(cors());
app.use(bodyParser.json());
app.use(express.static(path.join(__dirname, '../public')));

function randomId(len = 20) {
  return [...Array(len)].map(() => "abcdefghijklmnopqrstuvwxyz0123456789"[Math.floor(Math.random() * 36)]).join('');
}

const THEMES = [
  "富士登山に行く前に○○の用意が必要だ。",
  "駅前の一等地に○○の専門店が出来たみたいだ。今度行ってみよう。",
  "皆の者ここが正念場だ！○○で戦うのだ！",
  "世界を変えるために必要な力は、○○だ。",
  "異世界に召喚されたら最初に手に入れたいものは○○だ",
  "俺が信じているのは○○だけだ",
  "ぼくの彼女は人生を楽しむために○○が必要だと考えているみたいだ。",
  "戦いに挑むために必要な心構えは○○だ！",
  "おばあちゃんが○○について学びたいと言っていた。",
  "組長が得意なのは○○だ",
  "こんな海は嫌だ",
  "変わり果てた親友に一言",
  "織田信長の意外なエピソードとは？",
  "ムツゴロウさんが馬に蹴飛ばされて笑顔で一言",
  "送料手数料は〇〇が負担いたします！",
  "私が海賊になりたいと思ったきっかけは○○だった。",
  "不良のひろしくんが突然、先生に質問したこととは？",
  "人気アニメのタイトル「○○の刃」絶賛放送中！",
  "3155年の流行語",
  "「神である私があなたを○○の苦しみから解放してあげましょう。」",
  "「こら！まーたあんたは○○ばっかり見て！」",
  "新事実！！横浜の地底に○○が！？",
  "人間の3大欲求、食事、睡眠、〇〇",
  "おい、そこの君、なんだその○○は！やる気あるのか！",
  "私たちが暮らしている地球では、今も○○をめぐる争いが起こっています。",
  "引きこもりを言い換えて下さい",
  "人間の体で新しく発見された期間の名前とは？",
  "こんな〇〇は嫌だ",
  "ここであったが百年目！覚悟しろ！〇〇！",
  "眠らない赤ちゃんに見せたら眠るものとは",
  "こんな誕生日プレゼントは嫌だ。どんな誕生日プレゼント？",
  "ファミレスのドリンクバーで、これは警察に通報した方がいいでしょ。どんな人？",
  "じゃがいもに暴言を吐いて、悲しませてください。",
  "どらえもんの放送が打ち切りになったのは○○のせいです",
  "お菓子の国の国王、どんな人？",
  "誰にも言えないアンパンマンの苦手なものとは？",
  "あほあほ応援団、何を応援した？？",
  "エグザイルが全員ホームレスに？！何のせい？",
  "こんなきゅうりはいやだ！○○みたいなきゅうり？",
  "仕事の面接に絶対に受からない田中さん。面接で絶対に言うNGワードとは？",
  "100歳のストリートパフォーマーおばあちゃん。その演目は？",
  "偏差値75の人間の、コンビニで買うもの。",
  "ひもQをむさぼってたのは誰？",
  "牛丼屋の闇を教えてください",
  "東京タワーの新しい楽しみ方を教えてください",
  "あほあほ学生、ナンパもしないで夏の海で何をした？",
  "ボクシングでこいつ勝つ気ないな、なぜ？",
  "このSP、守ってくれそうにないな。なぜ？",
  "え？予想外！サッカー日本代表の秘策とは？",
  "マザコンの見分け方を教えてください",
  "そんな名前つけちゃかわいそう。地下芸人がハムスターにつけた名前とは？",
  "激マズカレー。隠し味に何入れた？",
  "こんなボーリングは嫌だ！どんなボーリング？",
  "何？この独特なサワー、何が搾ってある？",
  "元気100倍になる方法を教えてください！",
  "サッカーの本田圭佑選手が生まれて初めて口にした言葉は？",
  "恐怖！ファミレスの七不思議を教えてください",
  "何その駅名？名前だけで絶対行きたくなってしまう駅名とは？",
  "甲子園の土、持って帰った後何に使う？",
  "彼女との待ち合わせに遅れた時のかっこいい言い訳を教えてください",
  "未来から来た人の見分け方を教えてください",
  "楽しい歯磨きのやり方を教えてください",
  "知られざるニートの魅力って何？",
  "見た目もきもい、頭脳もきもい、名探偵キモン。何をつかって推理する？",
  "デスソースの新しい使い方を教えてください",
  "画期的な熱帯夜対策を教えてください",
  "クズクズの実の能力者。どんな能力？",
  "サッカーでレッドカードを取り消しにする裏技を教えてください",
  "こんなピーマンは大好きだ",
  "海で確実にギャルをナンパできるアイテムって何？",
  "山ガールが寄ってくるイベントってどんなイベント？",
  "あほすぎる！あほあほ学生のすいか割り、何をした？",
  "チャーハン王ってどんなやつ？",
  "野グソをするときのマナーを教えてください",
  "見たい夢を見る方法を教えてください",
  "ニートがクラウドファンディング！どんなアイディア？",
  "親に「あんたを生んでよかった」と言わせる方法は？",
  "毎日バズる。バズりばーちゃん、今日のツイッターのつぶやきは？",
  "高い腕時計つけてる人あるあるを教えてください",
  "甲子園は夢のまた夢。なぜそう思う？",
  "国会議員って国会議事堂で何してるの？",
  "かき氷でキーンといわないようにする方法は？",
  "こんなアイスキャンディーは嫌だ！どんなアイスキャンディー？",
  "この人、ゴキブリに優しすぎ、なにもの？",
  "オナラをする前に一言添えるだけでモテモテに！どんな言葉？",
  "公園に落ちているえっち本をかっこよく拾う方法を教えてください",
  "海水浴場の闇を教えてください",
  "海でのダサイ過ごし方を教えてください",
  "ディズニーの新キャラ。何？",
  "売り上げの高いアニメの特徴は何？",
  "ドラえもんが新しく始めたこと",
  "アンパンマンの顔食べつくしたらどうなった？",
  "信号機に新しい色を加えるなら？○○色？",
  "エイリアンたちの意外な主食とは？",
  "こんなマニフェストを挙げている都知事は嫌だ",
  "二日酔いに聞くという新食材は",
  "駄菓子屋常連の小学生におばあちゃんが一言",
  "ザンギエフの異名とは",
  "眠いのに寝れないその理由は？",
  "警察官が罪のない人を銃で撃ってしまい、逆ギレして一言。",
  "万引き犯が捕まって逆ギレして一言",
  "こんな蕎麦屋は嫌だ",
  "優しさとは？",
  "今日の朝ごはんは？",
  "看護師さんが採血前に一言",
  "こんな修学旅行は嫌だ",
  "コンビニに車で突っ込んで一言",
  "生麦、生米、〇〇",
  "新しい元号とは？",
  "こんな博物館は嫌だ",
  "突然肩に現れたスイッチ、押すとどうなる？",
  "アサガオの観察日記に書かれていた余計な一言とは",
  "万引きしたら無期懲役に、何を盗んだ？",
  "こんなラーメン屋の大将は嫌だ。",
  "ダイソンが掃除機に革命を、どんな新機能？",
  "病は〇〇から",
  "マクドナルドでご一緒にと勧められたメニューとは？",
  "全く売れなかったガリガリ君の味",
  "こんなラーメンのダシは嫌だ",
  "思わず2度見する医師の肩書きとは？",
  "こんな給食は変だ",
  "ヤクザが推奨する健康法とは？",
  "面白いホラー映画とは？",
  "総理のゴールデンウィークの予定を教えて。",
  "ある日鶏が気まぐれで鳴いた鳴き声",
  "コイツ人間失格だなーどんな奴？",
  "街で偶然元カノとバッタリ出会った。なんて声をかければいい？",
  "こんな風俗は嫌だ",
  "いい加減な弁護士が一言",
  "滑り台の終わりにでっかい水たまりが。避けられない！どうする？",
  "誰もが失笑したエイプリルフールの嘘",
  "不良のひろし君がいじめっ子をやっつけて一言。",
  "温泉の意外な効能",
  "踏まれても踏まれても立ち上がる雑草のような男。その名も",
  "牡蠣にあたったときの対処法",
  "腕相撲の必勝法",
  "やっぱりイナバ100人乗っても？",
  "ばいきんまんがアンパンマンに勝ったときの決め台詞とは？",
  "こんなハリーポッターは嫌だ",
  "前世の記憶を持つ赤ん坊が最初にしゃべる言葉",
  "嘘つきは○○の始まり",
  "友達から届いた反応に困るLINEメッセージとは",
  "お姉ちゃんといけないことをした。どんなこと？",
  "世界で一番優しい嘘とは？",
  "○○殺人事件",
  "かぐや姫が月に帰ったあとにおじいさんがおばあさんに行った一言",
  "夕暮れの道、一人ぼっちでトボトボ歩きながら一言。",
  "明日死ぬとしたら何をしますか？",
  "幽霊に一言申してください。",
  "邪悪なジジィが死に際に言った一言とは",
  "こんな校歌は嫌だ。どんな校歌？",
  "天才科学者が開発した“絶対に使い道がない発明”とは？",
  "初代桃太郎、今と全然違う！どこが違った？",
  "「開けてはいけない冷蔵庫」の中にあった意外なものとは？",
  "新幹線に「ゆっくり号」登場！どんな特徴？",
  "100年に一度だけ開く伝説のラーメン屋。何がヤバい？",
  "冥王星が怒っている理由とは？",
  "ラスボスが泣きながら出したセリフとは？",
  "「この人、絶対タイムスリップしてきたな」と思った理由は？",
  "道端に「落ちてたら絶対に二度見するもの」とは？",
  "カーナビが反抗期に入った。どんなナビ？",
  "うっかり召喚してしまった神様が残念だった。何がどう残念？",
  "クラスに1人はいる「謎の特技を持つ生徒」とは？",
  "絶対に笑ってはいけないお通夜。何が起きた？",
  "スマホが人格を持ったらこうなった",
  "歴史の教科書に突然出てきた架空の偉人「〇〇」の偉業とは？",
  "世界一どうでもいいギネス記録とは？",
  "「未来のコンビニ」ってどんな感じ？",
  "彼氏がサプライズでプレゼントしてきた、とんでもないモノとは？",
  "“〇〇”の語源が驚きの理由だった。何？",
  "先生が突然驚愕の一言「俺は今日から〇〇だ！」",
  "回転寿司に流れてきたら絶対取らないネタとは？",
  "推しが突然叫びだし、〇〇化してしまった！",
  "カメラの前でだけ豹変する動物、何をする？",
  "おばあちゃんが昔使ってた武器とは？",
  "1000年後のプロポーズの言葉とは？",
  "野球の新ルール「第10の塁」が爆誕！どんなルール？",
  "人生初〇〇に挑戦して大失敗。",
  "このUFO、何かおかしい。何が？",
  "全人類待望の機械登場！その名も「全自動〇〇機」",
  "バスの中で起きた静かな異変とは？",
  "魔法少女が使うとは思えないアイテムとは？",
  "超モテ男の唯一の弱点とは？",
  "神様にお願いしてはいけないことをお願いした結果…",
  "「一生に一度だけ許されるズル」あなたなら何に使う？",
  "このカップル、仲良さそうに見えて〇〇だった",
  "母からのLINEが怖い。なぜ？",
  "初代ピカチュウは今と違って〇〇だった",
  "まさかの食レポで放送事故。何があった？",
  "推しが「ガチでダサい服」を着てきた…どうする？",
  "呪われたゲーム、何が起きる？",
  "面接官が突然やりだした謎の行動とは？",
  "大人気ヒーローの驚きの休日の過ごし方とは？",
  "急にSNSでバズった理由とは？",
  "子どもが描いた「未来の車」すごすぎる。どんなの？",
  "超能力が一つだけ使える。でも〇〇という制約付き",
  "もしも地球がしゃべれたら最初に言うこととは？",
  "王様の命令が理不尽すぎる。どんな命令？",
  "学校の七不思議、8個目は何？",
  "失恋ソングの歌詞が妙に具体的だった。どんな内容？",
  "冷蔵庫がしゃべった！最初に言った言葉は？",
  "修学旅行で一番テンションが上がる瞬間とは？",
  "バーチャル世界で禁止されていることとは？",
  "絶対にツッコまざるを得ないファッションとは？",
  "流れ星にお願いしてはいけなかった。なぜ？",
  "映画「秒速5センチメートル」が完全ギャグに！どんなストーリー？",
  "急にモノが喋るようになった日常。どんな会話？",
  "お年玉がまさかの形で届いた。どうやって？",
  "ペットが飼い主に隠していた秘密とは？",
  "修学旅行先で見つけた“おかしな土産”とは？",
  "「このお弁当、ただの食事じゃないな…」何が入ってた？",
  "未来の学校に導入された“新しい授業”とは？",
  "すべてのCMが1秒だけになった。どうなった？",
  "体に1つだけボタンがある。それを押すと…？",
  "地球最後の日にコンビニがやっていたこととは？",
  "殺伐としたバトル漫画に突然出てきたほのぼのキャラ、何者？",
  "宇宙人が「地球最強の武器」と勘違いしたものとは？",
  "「今日からお前は〇〇だ！」何に任命された？",
  "どう見ても妖怪だけど一応人間。どんな人？",
  "運動会で起きた世紀の珍プレーとは？",
  "オリンピックに「新競技」が追加。何が採用された？",
  "このマジシャン、どう考えてもヤバい。何した？",
  "一周まわって怖くないお化けとは？",
  "初詣で引いたおみくじに書いてあった衝撃の一言とは？",
  "記憶喪失になった主人公が最初に思い出したのが〇〇",
  "ペットボトルのフタに「絶対に開けるな」と書いてあった。なぜ？",
  "予告編だけ異常に面白い映画の本編、どうなってた？",
  "過去最大のミスを犯した店員、何をした？",
  "鏡に映った自分が急に喋った。何を言ってきた？",
  "「無人島にひとつだけ持っていくなら？」という質問の意外すぎる回答",
  "電車のアナウンスが急にテンションMAX。なぜ？",
  "機械翻訳で変な日本語になった標識。なんと書いてある？",
  "妖精の国に迷い込んだら、〇〇で歓迎された",
  "罰ゲームで「一週間〇〇生活」になった。",
  "時を止める能力者が唯一できないこととは？",
  "100年前の人に現代の〇〇を説明したら驚愕した。何？",
  "アイドルが舞台挨拶で言ってしまった爆弾発言とは？",
  "運命の赤い糸がとんでもない場所に繋がっていた！",
  "ジャンケン大会の景品が想定外すぎる。なに？",
  "この町、何かがおかしい。どこ？",
  "ありえない場所にコンビニが出店！どこに？",
  "妖怪たちの合コンで起きた事件とは？",
  "カフェの新メニューが奇抜すぎる。なにが出る？",
  "未来のAIがバグった。どうなった？",
  "勇者の新しい仲間が絶対仲間になっちゃいけないタイプ。なぜ？",
  "異世界転生先が「〇〇」だった。",
  "恋人の部屋で見つけた衝撃のアイテムとは？",
  "おばあちゃんの昔話がSFすぎる。どんな内容？",
  "SNSで炎上した「伝説の投稿」とは？",
  "エレベーターの中で言ってはいけない一言とは？",
  "宇宙でしか流行らないファッションとは？",
  "一度だけ使える透明人間の能力、どう使う？",
  "選挙でとんでもない公約を掲げた候補者。その内容は？",
  "明日から「魔王」のバイトをすることになりました。初日の感想は？",
  "大事な会議中に社長が突然言い出した謎の指示とは？",
  "自動販売機に新機能が追加。その名も「○○ボタン」何が出る？",
  "天才すぎる幼稚園児の発明品とは？",
  "どうしても納得できない学校の新ルール",
  "江戸時代にあったら絶対バズるSNSとは？",
  "ゲームのチュートリアルがやたら難しい。なぜ？",
  "新婚初夜に配られた「謎のマニュアル」どんな内容？",
  "温泉旅館で遭遇した、絶対に普通じゃないサービスとは？",
  "世界一運が悪い男、今日は何があった？",
  "タイムマシンを間違った時代に送ってしまった。何が起こる？",
  "逆転裁判で証拠として出された、絶対ありえないものとは？",
  "スマホに突然届いた「未来からの通知」その内容は？",
  "宇宙人が地球の文化で一番驚いたこと",
  "絶対に読めない漢字一文字の意味を教えてください",
  "新種のペット、その驚きの特徴は？",
  "AIが初めて嘘をついた。その理由は？",
  "新しいスポーツ「無重力○○」どんな競技？",
  "刑事ドラマ史上最悪の犯人、どんなやつ？",
  "歩くたびに○○が発動する呪い",
  "天使の間違ったアドバイスとは？",
  "世界を救った間抜けな一言",
  "オリンピック史上初の新競技、どんなの？",
  "神様が気に入って毎日食べているものとは？",
  "世界中で大ヒットした「謎のアプリ」その機能は？",
  "実は宇宙人だったと気付く瞬間",
  "マンガの主人公なのに絶対勝てない理由",
  "友達になってはいけない動物、その理由は？",
  "世界最速で解雇されたアルバイト。その失敗理由は？",
  "伝説の武器がまさかの形状！何？",
  "SNSで拡散してはいけない写真とは？",
  "家庭科の授業でだけ起きる奇跡",
  "機械音痴すぎるロボット、その失敗談",
  "世界一短い小説、その内容は？",
  "どうしても笑ってしまう厳粛な儀式",
  "歴史の偉人が現代で絶対やりそうな失敗",
  "大人になってもやめられない謎の習慣",
  "卒業アルバムに書かれていた驚きの一言",
  "未来の医者が処方する意外な薬とは？",
  "お笑い芸人が政治家になったら言いそうなこと",
  "修羅場で使う謎のビジネス用語",
  "最新鋭の冷蔵庫、ありえない新機能",
  "一日だけ○○になる体験イベント、何？",
  "知らない間に増えていた新しい家族、何？",
  "大人だけが知っている隠された校則",
  "一生に一度だけ参加できる謎の祭り、内容は？",
  "最後の晩餐に出された驚きのメニュー",
  "プロ野球の新ポジション、その名も○○。何をする？",
  "コンビニのレジで突然始まった謎の儀式",
  "絶対に拾ってはいけない落とし物",
  "令和の新マナーとは？",
  "地球防衛軍が思わずズッコケた敵の攻撃",
  "絶対にウケないけどやってみたいギャグ",
  "ドラマ「家政婦の○○」主人公のヤバい特徴",
  "家の隅に隠されていた意外なもの",
  "朝起きたら身長が2倍に！まず最初に困ること",
  "誰もが涙したクレーマーの美談",
  "世にも奇妙な恋愛相談、その内容は？",
  "実は人間じゃなかった有名人。その証拠とは？",
  "1日だけ動物になれるとしたら絶対やりたいこと",
  "定食屋で起きたシュールすぎる出来事",
  "1億円あげる代わりに「1週間○○生活」何生活？",
  "どうしても欲しくならない福袋、その内容は？",
  "完全無人のラーメン屋。どんな接客？",
  "週刊誌に載ったどうでもよすぎるスクープ",
  "AI面接官の珍質問とは？",
  "銭湯で遭遇した謎のおじさん、その正体は？",
  "あの有名な童話、エンディングがまさかの展開！どうなった？",
  "学校あるあるが通じない異世界。何が違う？",
  "ちょっと意味が分からない告白のセリフ",
  "自転車の新しい乗り方、その名も「○○乗り」どんな乗り方？",
  "給食に混ざっていた驚きのもの",
  "お正月の新しい過ごし方を提案してください",
  "生まれたときから持っている謎の才能",
  "街中で見かけた不思議すぎる標識",
  "絶対に笑ってはいけないスーパーの特売",
  "明日の天気予報に出てきた謎の現象",
  "無敵のヒーローにたった1つだけ弱点が！何？",
  "過去に1度だけ放送された伝説のCM、どんな内容？",
  "サンタクロースが配り間違えたプレゼント、その内容",
  "わが家の家訓が変すぎる。その内容は？",
  "先生がこっそり教えてくれた裏ワザ",
  "お化け屋敷で一番怖かったのはお化けじゃなくて○○だった",
  "絶対にお客さんが来ないレストラン。なぜ？",
  "ペットショップの新サービス、何？",
  "世界一地味な大会、その種目は？",
  "AIが勝手に作った新しい言葉、その意味は？",
  "ここだけの話、実は地球って○○だった",
  "どんな願いも1つだけ叶えてくれる神様。でも注意点は？",
  "もしも人間以外になれたら最初にやりたいこと",
  "迷子のアナウンスが面白すぎる。なぜ？",
  "一度は言ってみたい決め台詞",
  "タクシー運転手が絶対に曲がらない理由",
  "無人島生活、最大のピンチは？",
  "鬼ごっこが成立しない新ルール",
  "伝説の漫画家が絶対描きたくなかったジャンルとは？",
  "誰にも気付かれないサプライズプレゼント",
  "異世界のコンビニにだけあるサービスとは？",
  "もしもトイレが1日だけ使えなくなった世界。何が起こる？",
  "家族全員が朝起きて突然○○になっていた。何？",
  "給食当番がやらかした史上最悪の事件とは？",
  "UFOキャッチャーで絶対に取れない景品。その正体は？",
  "幽霊がどうしても叶えたい生前の夢、何？",
  "未来の定年退職パーティ、どんな感じ？",
  "スマホに搭載される謎の新機能“○○モード”とは？",
  "古代エジプトに持っていったら一番困る現代アイテム",
  "「絶対に怒らない人」が怒った理由は？",
  "おじいちゃんの謎すぎる若い頃の武勇伝とは？",
  "世界で一番笑える禁句、何？",
  "地味すぎて誰も気づかないスーパーパワー",
  "パンダ専門の動物園、どんな特徴？",
  "お年玉がまさかの“物”で届いた。何だった？",
  "漫画に絶対いらない新キャラ、その役割は？",
  "親友から突然届いた「意味深すぎるメッセージ」その内容は？",
  "新婚旅行でしか行けない謎の国。どんな国？",
  "交通安全教室で先生が見せた珍パフォーマンスとは？",
  "人生最大のミスを帳消しにできるアイテム。その使い道は？",
  "新しい学校行事“逆修学旅行”とは？",
  "宇宙人と人間の合コン、絶対に話題に出ること",
  "ゾンビ映画に出てくる『超冷静なゾンビ』何をする？",
  "天才科学者の遺言が予想外すぎた。なんと書いてあった？",
  "史上最低のテレビ番組、その内容は？",
  "24時間耐久○○、どんな競技？",
  "小学生の時だけ見えた謎の生き物とは？",
  "10年後のカップ焼きそば、どんな進化？",
  "カラオケで絶対盛り下がる選曲とは？",
  "逆に絶対ダサいプロポーズの言葉",
  "ペットが人間に言いたかった一言とは？",
  "学校のトイレの個室で見つけた謎のアイテム",
  "コンビニの新サービス『○○ポイント』、何ポイント？",
  "運動会で急に始まった謎の競技",
  "「絶対に使えないけど欲しくなる」ガジェットとは？",
  "一番モテる妖怪、その理由は？",
  "先生が全校集会で突然やり始めたこと",
  "クレジットカードに搭載されたありえない特典",
  "謎解きイベントで誰も解けなかった理由",
  "電車の中でだけ通用する謎ルール",
  "1000年後のおせち料理、どんなもの？",
  "給食の人気メニューがなぜか大炎上。理由は？",
  "部活の合宿で起きた珍事件",
  "「超スローなヒーロー」どんな活躍？",
  "スーパーの福引で当たった一番地味な景品",
  "合コンで絶対に盛り上がらない話題",
  "社長の机の引き出しに入っていた謎のモノ",
  "家の裏庭で発見された“未確認物体”とは？",
  "空き缶で作られた世界一高価なアート作品、その特徴は？",
  "新作ゲーム『リアル○○シミュレーター』どんなゲーム？",
  "マラソン大会で全員脱落した理由",
  "AIが描いた変すぎる自画像",
  "「絶対に怒られない言い訳」教えてください",
  "ファミレスで遭遇した伝説の店員、その行動は？",
  "バイト面接で一発アウトになった質問とは？",
  "大昔の人が驚く現代の“当たり前”とは？",
  "王様がなぜかハマった趣味",
  "真夜中の学校で聞こえた謎の音、その正体は？",
  "サラリーマンだけが知っている秘密の朝活",
  "宇宙一どうでもいい大会、その種目は？",
  "芸能人のSNSで起きた珍事件",
  "ありえない場所で見つかった落とし物",
  "恋人から突然送られてきた意味不明なスタンプ、その絵は？",
  "一発ギャグで世界を救った話",
  "絶対に当たらない占い師、その占い結果",
  "史上最速で終わった大事件、その理由は？",
  "伝説のラーメン職人の裏メニュー、その正体は？",
  "音楽の授業でしか使わない謎の道具",
  "学校の先生が密かに集めているもの",
  "未来の子供たちの流行語とは？",
  "人類滅亡寸前に発明されたどうでもいい道具",
  "プロレスラーがリング外でやってしまった大失態",
  "動物園でしか見られない不思議なイベント",
  "絶対にツッコんではいけないカフェ、その理由は？",
  "本屋で一番売れない本のタイトル",
  "絶対に感動しない卒業ソング、その歌詞は？",
  "デートで絶対やってはいけない行動",
  "小学生の頃だけ信じていた謎ルール",
  "AIが間違えて覚えた日本の伝統文化とは？",
  "合コンでモテモテになる謎アイテム",
  "ネット通販で絶対に買わない商品、その理由は？",
  "クラス替えで起きた前代未聞の事件",
  "初夢で見た不思議すぎる光景",
  "宇宙一くだらない発明品とは？",
  "あの有名映画のNGシーン、その内容は？",
  "世界一安い高級ホテル、どんなサービス？",
  "習い事の先生が本当は○○だった！",
  "社内で噂の伝説のコピー機、その特徴は？",
  "校長先生の卒業式での珍スピーチ",
  "未来のプリクラで追加された新機能",
  "“バグだらけのAI”がやらかしたこと",
  "スーパーのレジで一番驚いた瞬間",
  "謎の覆面レスラー、その正体を予想してください",
  "絶対に燃えない炎、どうやって使う？",
  "ど田舎の村だけで流行っている謎の遊び",
  "家族でしか通じない暗号、その内容は？",
  "歴史の教科書に載らなかった驚きの事件",
  "すべての信号が青になった街、何が起きた？",
  "「どうでもよすぎるギネス記録」教えてください",
  "夏休みの宿題で唯一出された奇妙な課題",
  "伝説の料理人が使う“最終奥義”とは？",
  "日曜朝だけ放送される幻の番組、その内容は？",
  "新種のウイルスがもたらした意外な効果",
  "アルバイト中に起きたミラクルな出来事",
  "未来のSNSにしかない謎の機能"
];

const HAND_GENERAL = [
   "アイス",
  "足の裏",
  "雨",
  "家",
  "椅子",
  "うさぎ",
  "英語",
  "鉛筆",
  "王冠",
  "大人",
  "おばけ",
  "親指",
  "女",
  "音符",
  "階段",
  "カエル",
  "顔",
  "カタツムリ",
  "カバン",
  "カレーライス",
  "カレンダー",
  "牛乳",
  "キリン",
  "草",
  "クジラ",
  "唇",
  "首",
  "曇",
  "ケーキ",
  "ご飯",
  "魚",
  "桜",
  "サッカー",
  "三角形",
  "信号",
  "鈴",
  "ズボン",
  "扇風機",
  "掃除機",
  "ソフトクリーム",
  "太陽",
  "チューリップ",
  "蝶",
  "爪",
  "テレビ",
  "電気",
  "電車",
  "電話",
  "ドア",
  "トイレ",
  "トカゲ",
  "時計",
  "長靴",
  "納豆",
  "涙",
  "日本",
  "鶏",
  "人参",
  "ネギ",
  "猫",
  "根っこ",
  "のこぎり",
  "ハサミ",
  "はしご",
  "パソコン",
  "バツ",
  "バッタ",
  "バット",
  "花",
  "バナナ",
  "晴れ",
  "ピアノ",
  "ビール",
  "飛行機",
  "瓶",
  "袋",
  "布団",
  "船",
  "ふんどし",
  "ボール",
  "ポスト",
  "骨",
  "本",
  "枕",
  "三日月",
  "ミッキー",
  "ミミズ",
  "虫",
  "メガネ",
  "目玉焼き",
  "メロン",
  "森",
  "雪だるま",
  "四コマ",
  "ライオン",
  "楽だ",
  "リボン",
  "りんご",
  "ロケット",
  "ワニ",
  "頭",
  "あり",
  "イカ",
  "犬",
  "イルカ",
  "宇宙",
  "海",
  "エビ",
  "お菓子",
  "お金",
  "男",
  "カーテン",
  "買い物",
  "傘",
  "学校",
  "カブトムシ",
  "髪の毛",
  "カラス",
  "体",
  "皮",
  "きのこ",
  "雲",
  "車",
  "携帯電話",
  "ゲーム",
  "消しゴム",
  "コーヒー",
  "コアラ",
  "黒板",
  "コップ",
  "子供",
  "ゴミ箱",
  "小指",
  "四角形",
  "島",
  "シャツ",
  "スイカ",
  "スカート",
  "スプーン",
  "滑り台",
  "タイヤ",
  "タコ",
  "畳",
  "竜巻",
  "卵",
  "だるま",
  "地球",
  "机",
  "釣り竿",
  "手紙",
  "鉄棒",
  "手のひら",
  "天気",
  "電線",
  "トランプ",
  "鳥",
  "トンボ",
  "ナイフ",
  "なす",
  "ネクタイ",
  "ネズミ",
  "ハート",
  "橋",
  "八",
  "花火",
  "人差し指",
  "ひまわり",
  "プール",
  "増え",
  "フォーク",
  "富士山",
  "プリン",
  "プロペラ",
  "ヘッドホン",
  "蛇",
  "ベルト",
  "防止",
  "星",
  "炎",
  "マイク",
  "マウス",
  "マスク",
  "窓",
  "マフラー",
  "マリオ",
  "丸",
  "みかん",
  "水",
  "水着",
  "目玉焼き",
  "野球",
  "山",
  "洋服",
  "ヨット",
  "ライト",
  "ラッパ",
  "リモコン",
  "レモン",
  "ロボット",
  "輪投げ",
  "アキレス腱",
  "足跡",
  "いいね",
  "いびき",
  "ウインク",
  "宇宙人",
  "狼",
  "オープンカー",
  "オタマジャクシ",
  "折り畳み傘",
  "ガールフレンド",
  "海外旅行",
  "貝殻",
  "肩車",
  "カッター",
  "蚊取り線香",
  "カメラマン",
  "ガラス",
  "間接キス",
  "キーボード",
  "吸血鬼",
  "筋トレ",
  "金メダリスト",
  "孔雀",
  "口紅",
  "靴ずれ",
  "クリスマスツリー",
  "芸能人",
  "結婚式",
  "交換日記",
  "甲羅",
  "攻略本",
  "コースター",
  "催眠術",
  "サッカーボール",
  "自衛隊",
  "色紙",
  "自動ドア",
  "砂利道",
  "絨毯",
  "充電器",
  "手裏剣",
  "しりとり",
  "シンセサイザー",
  "水槽",
  "タブレット",
  "タペストリー",
  "玉入れ",
  "たんこぶ",
  "地球儀",
  "チョーク",
  "つくね",
  "Tシャツ",
  "手形",
  "天気雨",
  "天井",
  "透明",
  "とさか",
  "隣",
  "溝",
  "鳥かご",
  "流しそうめん",
  "忍者",
  "飲み薬",
  "爆発",
  "化け物",
  "バスガイド",
  "パチンコ",
  "初恋",
  "春休み",
  "バレリーナ",
  "光",
  "ひだまり",
  "美容院",
  "ピラミッド",
  "ブーメラン",
  "フラフープ",
  "平和",
  "ベンチ",
  "ポストカード",
  "ホワイトクリスマス",
  "本州",
  "ボンネット",
  "マウスパッド",
  "マスカット",
  "松葉杖",
  "マンション",
  "ミキサー",
  "水たまり",
  "三つ編み",
  "耳栓",
  "虫かご",
  "メガネ拭き",
  "八百屋",
  "焼き鳥",
  "野球場",
  "遊園地",
  "夕焼け",
  "緑茶",
  "割り箸",
  "アイシャドウ",
  "アイマスク",
  "青空",
  "赤ちゃん",
  "アパート",
  "あめんぼ",
  "泡だて器",
  "遺書",
  "糸電話",
  "ウォシュレット",
  "梅干し",
  "エレキギター",
  "エレベーター",
  "屋上",
  "温泉",
  "かさぶた",
  "合唱コンクール",
  "門松",
  "カプセル",
  "着替え",
  "機関車",
  "キスマーク",
  "金魚",
  "鎖",
  "グローブ",
  "競馬",
  "鍵盤",
  "告白",
  "心",
  "児玉",
  "ごま塩",
  "コマネチ",
  "サンゴ礁",
  "仕事",
  "しちりん",
  "シャボン玉",
  "ジャングル",
  "小学校",
  "少女",
  "寝室",
  "スーパースター",
  "スピーカー",
  "スポットライト",
  "体重",
  "焚き火",
  "たすき掛け",
  "タンクトップ",
  "短冊",
  "駐車場",
  "中国",
  "通信",
  "停電",
  "デザイナー",
  "徹夜",
  "デパート",
  "点線",
  "同級生",
  "ドクロ",
  "年下",
  "特急",
  "突風",
  "泥水",
  "生ビール",
  "日直",
  "抜け殻",
  "ノートパソコン",
  "飲み会",
  "背景",
  "白紙",
  "はちみつ",
  "花嫁",
  "パノラマ写真",
  "パラパラ漫画",
  "犯人",
  "双子",
  "布団たたき",
  "へその緒",
  "ベルトコンベア",
  "ボーリング",
  "ポップコーン",
  "ポテトチップス",
  "歩道橋",
  "哺乳類",
  "ホワイトデー",
  "ホワイトハウス",
  "窓ガラス",
  "マニキュア",
  "麦わら帽子",
  "めまい",
  "燃えるゴミ",
  "浴衣",
  "雪合戦",
  "幼稚園",
  "酔っ払い",
  "ランキング",
  "ルアー",
  "冷凍庫",
  "レインコート",
  "脇毛",
  "和太鼓",
  "空き缶",
  "あごひげ",
  "肋骨",
  "雨漏り",
  "アライグマ",
  "入れ墨",
  "隕石",
  "インターホン",
  "ウエストポーチ",
  "お年玉",
  "お面",
  "楽譜",
  "かぐや姫",
  "花壇",
  "家庭教師",
  "画鋲",
  "紙コップ",
  "カミソリ",
  "眼帯",
  "銀行",
  "くじ引き",
  "靴紐",
  "曇り空",
  "剣道",
  "券売機",
  "鯉のぼり",
  "高層ビル",
  "ゴーグル",
  "ごみ袋",
  "賽銭箱",
  "三角フラスコ",
  "下敷き",
  "失恋",
  "遮断器",
  "渋滞",
  "神社",
  "水蒸気",
  "垂直",
  "スタンプ",
  "スニーカー",
  "生徒会",
  "先生",
  "戦争",
  "洗濯バサミ",
  "千羽鶴",
  "そろばん",
  "タイツ",
  "逮捕",
  "宝くじ",
  "抱っこ",
  "玉ねぎ",
  "知恵の輪",
  "つらら",
  "デート",
  "天気図",
  "電子レンジ",
  "導火線",
  "トースト",
  "トートバッグ",
  "トナカイ",
  "ドライフラワー",
  "トロッコ",
  "生物",
  "寝癖",
  "のレン",
  "バイオリン",
  "パイ投げ",
  "パイナップル",
  "バタ足",
  "裸",
  "パレード",
  "バンド",
  "ハンマー投げ",
  "ピエロ",
  "ピラニア",
  "ファンデーション",
  "風力発電",
  "ブサイク",
  "ブラジャー",
  "フランクフルト",
  "プリンター",
  "ペットショップ",
  "包帯",
  "北海道",
  "北極星",
  "魔法",
  "ミートボール",
  "みぞおち",
  "ミニスカート",
  "メロンソーダ",
  "モノレール",
  "夜景",
  "郵便局",
  "ヨーロッパ",
  "落書き",
  "ラブソング",
  "リストバンド",
  "リビング",
  "レーシック",
  "レスキュー隊",
  "アイススケート",
  "アナウンサー",
  "雨宿り",
  "アルバイト",
  "アンダーライン",
  "胃カメラ",
  "田舎",
  "稲妻",
  "入り口",
  "うがい薬",
  "上唇",
  "オートバイ",
  "大晦日",
  "折り紙",
  "会社",
  "ガソリンスタンド",
  "かぼちゃ",
  "観覧車",
  "金髪",
  "空気入れ",
  "口ひげ",
  "口笛",
  "グランドピアノ",
  "黒縁メガネ",
  "ゲームボーイ",
  "向上",
  "コスプレイヤー",
  "粉ミルク",
  "コンセント",
  "サーフボード",
  "坂道",
  "サラリーマン",
  "シール",
  "写真立て",
  "車線",
  "ショートケーキ",
  "ショートパンツ",
  "女子会",
  "ショベルカー",
  "水道管",
  "スカイツリー",
  "スクーター",
  "スコップ",
  "声優",
  "節分",
  "洗剤",
  "双眼鏡",
  "ダーツ",
  "体温計",
  "たくあん",
  "卵かけご飯",
  "だるま落とし",
  "田んぼ",
  "地平線",
  "チャンピオン",
  "つけまつげ",
  "ティアラ",
  "手錠",
  "テトラポッド",
  "デフォルメ",
  "テヘペロ",
  "天狗",
  "天国",
  "電動歯ブラシ",
  "東大",
  "ドヤ顔",
  "鳥肌",
  "ニーソックス",
  "二次元",
  "入道雲",
  "ぬいぐるみ",
  "ハーレム",
  "歯車",
  "鼻くそ",
  "花婿",
  "はにわ",
  "ハムスター",
  "パン屋",
  "膝枕",
  "火だるま",
  "避雷針",
  "ファスナー",
  "フェンス",
  "吹き出し",
  "プレゼント",
  "ヘアピン",
  "ペットボトル",
  "ペンキ",
  "法律",
  "マグカップ",
  "マグマ",
  "耳鳴り",
  "虫刺され",
  "目薬",
  "メロンパン",
  "鎧",
  "リサイクル",
  "レーザー",
  "レスリング",
  "わかめ",
  "ごめんね",
  "ありがとう",
  "金槌",
  "ハンマー",
  "まごの手",
  "アイスホッケー",
  "悪魔",
  "朝顔",
  "妹",
  "インフルエンザ",
  "沖縄県",
  "お子様ランチ",
  "オッドアイ",
  "親知らず",
  "オルガン",
  "ガードマン",
  "カヌー",
  "神様",
  "彼氏",
  "感電",
  "キーホルダー",
  "気球",
  "きつねうどん",
  "着物",
  "キャタピラ",
  "救急車",
  "牛肉",
  "巨人",
  "グラフ",
  "クローバー",
  "献血",
  "工事現場",
  "ゴキブリホイホイ",
  "こたつ",
  "コマーシャル",
  "サーキット",
  "鎖骨",
  "サファイア",
  "シーソー",
  "シェフ",
  "社長",
  "視力検査",
  "推奨",
  "ストライク",
  "スポーツジム",
  "スマートフォン",
  "スムージー",
  "擦り傷",
  "静電気",
  "石像",
  "送電線",
  "ソファー",
  "竹とんぼ",
  "タコ糸",
  "たわし",
  "チェック柄",
  "チャイルドシート",
  "茶碗",
  "ツタンカーメン",
  "つば",
  "吊り橋",
  "テーブルクロス",
  "展望台",
  "東京タワー",
  "ドラム缶",
  "どらやき",
  "中指",
  "名札",
  "ナメクジ",
  "二酸化炭素",
  "ネッシー",
  "ハイキング",
  "バスト",
  "パスポート",
  "罰ゲーム",
  "花火大会",
  "針山",
  "絆創膏",
  "氷山",
  "腹筋",
  "フライドポテト",
  "ヘドロ",
  "ベランダ",
  "ヘルメット",
  "方位磁針",
  "ボーイフレンド",
  "牧場",
  "補助輪",
  "ボードゲーム",
  "ホテル",
  "巻きフン",
  "魔法陣",
  "豆電球",
  "水玉",
  "水虫",
  "無洗米",
  "メガホン",
  "モアイ像",
  "火傷",
  "闇鍋",
  "夕食",
  "ライブ",
  "りんご飴",
  "留守番",
  "ワールドカップ",
  "あくび",
  "編み物",
  "嵐",
  "安全ピン",
  "色鉛筆",
  "宇宙船",
  "映画館",
  "笑顔",
  "絵の具",
  "遠距離恋愛",
  "おかず",
  "おなら",
  "鬼ごっこ",
  "お見合い",
  "おやつ",
  "影武者",
  "火災報知器",
  "壁ドン",
  "髪飾り",
  "瓦屋根",
  "逆転",
  "協会",
  "巨乳",
  "金魚すくい",
  "筋肉",
  "空中ブランコ",
  "煙",
  "家来",
  "研究室",
  "コインランドリー",
  "合コン",
  "コーヒーメーカー",
  "逆上がり",
  "雑草",
  "殺虫剤",
  "サンドイッチ",
  "しおり",
  "自動販売機",
  "写真集",
  "射的",
  "ショルダーバッグ",
  "新幹線",
  "スケートボード",
  "すだれ",
  "スマイル",
  "体育館",
  "大根おろし",
  "大仏",
  "太陽光発電",
  "短パン",
  "地下室",
  "ティーポット",
  "手鏡",
  "鉄塔",
  "とんかつ",
  "夏祭り",
  "二等辺三角形",
  "日本酒",
  "喉仏",
  "野良猫",
  "バスタオル",
  "斜向い",
  "パプリカ",
  "パラダイス",
  "バランス",
  "ピーナッツ",
  "日陰",
  "ひざ掛け",
  "昼寝",
  "貧乳",
  "封筒",
  "部室",
  "沸騰",
  "フライング",
  "風呂敷",
  "風呂掃除",
  "ペダル",
  "忘年会",
  "ボタン電池",
  "ポニーテール",
  "麻雀",
  "マットレス",
  "まぶた",
  "豆まき",
  "万年筆",
  "水しぶき",
  "胸毛",
  "モグラ",
  "もんじゃ焼き",
  "野次馬",
  "ゆでたまご",
  "横綱",
  "4コマ漫画",
  "ラブレター",
  "ランダム",
  "レーシングカー",
  "レモネード",
  "ワイヤー",
  "ワゴン車",
  "わさび",
  "猫耳",
  "パーカー",
  "ハイパーヨーヨー",
  "ハイヒール",
  "パイロット",
  "走り高跳び",
  "初日の出",
  "ビーチパラソル",
  "ビーチボール",
  "ピクルス",
  "飛行機雲",
  "びっくり箱",
  "ピッチャー",
  "ヒロイン",
  "ふくらはぎ",
  "便座カバー",
  "暴走族",
  "棒高跳び",
  "ホームシアター",
  "マーガリン",
  "魔法のランプ",
  "マヨネーズ",
  "水風船",
  "野球帽",
  "弓矢",
  "妖怪",
  "夜空",
  "リコーダー",
  "牢屋",
  "ロープウェイ",
  "ローラースケート",
  "露天風呂",
  "ワンルーム",
  "水鉄砲",
  "以下",
  "以上"
];
const HAND_FUNNY = [
  "デスノート",
  "オス",
  "メス",
  "火星",
  "ペッパー君",
  "チャオチュール",
  "桁違い",
  "サザエさんじゃんけん",
  "60点",
  "廊下",
  "茶色チョーク",
  "詐欺集団",
  "時代遅れ",
  "悪代官",
  "SUICA",
  "ビーストウォーズ",
  "エアマックス",
  "ご近所さん",
  "タバコの吸い殻",
  "フィフィ",
  "黒い袋",
  "なにかの足",
  "割れ物注意",
  "葉加瀬太郎",
  "200円の商品",
  "やばい店員さん",
  "水着グラビア",
  "芽生えた友情",
  "視力検査",
  "弾丸",
  "胸ポケット",
  "女の子",
  "札束",
  "熱々の石",
  "一気飲み",
  "カドミウム",
  "全裸",
  "子育て",
  "ブルガリア人",
  "サイヤ人",
  "野々村誠",
  "黒柳徹子",
  "コロコロコミック",
  "世界の果て",
  "時空のゆがみ",
  "小麦粘土",
  "硫酸",
  "ジャムおじさん",
  "一二塁間",
  "ミドルシュート",
  "2秒",
  "春の陽気",
  "干からびたやつ",
  "フェイスブック",
  "袋叩き",
  "ジュラ紀",
  "鬼の手",
  "反復横跳び",
  "大盛りごはん",
  "ピープル",
  "くそデブ",
  "つば",
  "胃ガン",
  "プール後の睡魔",
  "灰汁",
  "カンスト",
  "パンチ",
  "深爪",
  "みそだれ",
  "猿ぐつわ",
  "ガソリン満タン",
  "蜜",
  "牛丼上",
  "欧米人",
  "天丼",
  "あいまいな回答",
  "はみチン",
  "個性的フェイス",
  "ほふく前進",
  "黄ばんだシャツ",
  "フルーティパパイヤ",
  "プリケツ",
  "スライディング",
  "ギリギリセーフ",
  "ゆっくり動くタイプ",
  "ロボティクス",
  "衣擦れ",
  "コロッセオ",
  "スタープラチナ",
  "敵スタンド使い",
  "ブーメランパンツ",
  "娘の水鉄砲",
  "開脚前転",
  "あずきバー色",
  "人殺しの目",
  "フルチン",
  "ふり被って",
  "全力パンチ",
  "東スポ",
  "カバジ",
  "モージ",
  "ひもQ",
  "砂食いババア",
  "ドラミング",
  "踊り食い",
  "ミッキーの群れ",
  "ヘビ使い",
  "解放感",
  "ガラパゴスケータイ",
  "セーブデータ",
  "コマンド入力",
  "バタフライ泳法",
  "的屋のおっちゃん",
  "若頭",
  "鉄砲玉",
  "おてんばプリンセス",
  "デンプシーロール",
  "我が物顔",
  "ガイルの負け顔",
  "千秋楽",
  "1万キロ",
  "ぶつかり稽古",
  "わんぱくな坊や",
  "とっつぁん坊や",
  "七分たけ",
  "つるっぱげ",
  "ゴミの山",
  "バービーちゃん",
  "デリシャスパーティプリキュア",
  "気だるい朝",
  "登校班",
  "はまっこタイム",
  "クラブ活動",
  "スカイダイビング",
  "超強力接着剤",
  "ドバイの高層ビル",
  "ダンゴムシ",
  "コロボックル",
  "サンドワーム",
  "サメ肌",
  "殺し合い",
  "体力勝負",
  "やさしい言葉",
  "かなしい現実",
  "室伏広治",
  "吉田沙保里",
  "絶望感",
  "南極大陸",
  "想像を絶する体験",
  "かったい",
  "やわらかーい",
  "マシュマロボディ",
  "魑魅魍魎",
  "悪鬼羅刹",
  "傲慢な夫人",
  "ハゲ親父",
  "消臭剤",
  "小林製薬",
  "精力剤",
  "熱々おでん",
  "育毛剤",
  "邪悪な子供",
  "クソガキ",
  "席を譲らない",
  "ガチンコ",
  "ブレイキングダウン",
  "ファイトクラブ",
  "豚野郎",
  "昼ドラ「牡丹と薔薇」",
  "カメックス",
  "ボディビル大会",
  "アインシュタインみたいな表情",
  "トロッコ",
  "鬼武者2",
  "ご先祖様",
  "カッパドキア",
  "マチュピチュ",
  "チョモランマ",
  "バハムート",
  "メガフレア",
  "クラウド",
  "元ソルジャー",
  "ジャジャン拳",
  "酔拳",
  "セクシーコマンドー",
  "浜渡浩満(ハマー)",
  "ボンチュー",
  "東横イン",
  "森羅万象",
  "酒池肉林",
  "心のケア",
  "芋ようかん",
  "嫌なドッキリ",
  "ステーキ100グラム",
  "泣かせる話",
  "紙相撲",
  "とりあえずビール",
  "リアリティ",
  "VRゴーグル",
  "チキンソテー",
  "抱き枕",
  "心ばかりのお礼",
  "木魚",
  "（笑）",
  "奈良の大仏",
  "ガンジー",
  "死者蘇生",
  "アンニュイ",
  "ひやむぎ",
  "ガッツ石松",
  "C-3PO",
  "サラブレッド",
  "るるぶ",
  "コンピューターおばあちゃん",
  "心霊写真",
  "きかんしゃトーマス",
  "精進料理",
  "しゃがみ弱キック",
  "往復ビンタ",
  "スネ夫のお母さん",
  "サイコメトラー",
  "尾木ママ",
  "原始人",
  "すね毛",
  "ビッグマックセット",
  "ハッピーセット",
  "ポン・デ・リング",
  "ガノンドロフ",
  "ファルコンパンチ",
  "火中天津甘栗拳",
  "ポパイ",
  "タルタルソース",
  "天城越え",
  "ポケットステーション",
  "南米アマゾン",
  "ガンジス川",
  "地底世界",
  "煮こごり",
  "コメダ珈琲",
  "ズーラシア",
  "こふき芋",
  "炭坑夫",
  "蟹工船",
  "服部平次",
  "バルタン星人",
  "のキメラ",
  "キメラ",
  "SASUKE",
  "山田勝己",
  "所さん",
  "ユーチューバー",
  "ティックトッカー",
  "インスタグラマー",
  "公共施設",
  "公道",
  "ペニオク",
  "原住民",
  "アボリジニ",
  "インディアン",
  "T.M.Revolution",
  "ストロングゼロ",
  "クソ馬鹿",
  "ウーマン",
  "ハレンチ",
  "サンドバッグ",
  "呼吸",
  "ヤクザ",
  "弱点",
  "ウィークポイント",
  "雑魚",
  "覇王",
  "消費者金融",
  "サイバーボンテージ",
  "パン祭り",
  "桜でんぶ",
  "7の段",
  "液体燃料",
  "大好物",
  "ランキング",
  "過ち",
  "油膜",
  "カリスマ美容師",
  "尿検査",
  "しんなり白菜",
  "UNO",
  "さらに高み",
  "ハンドクリーム",
  "不可能",
  "クレーム対応",
  "シンナー",
  "お前",
  "1000万",
  "リンスインシャンプー",
  "全員",
  "群馬",
  "ポーカーフェイス",
  "オペ",
  "一人ずつ",
  "金玉",
  "火事場",
  "どす",
  "粉末状",
  "老婆",
  "空中戦",
  "クソコラ",
  "ポコチン",
  "クリーミィ",
  "骨折",
  "バックネット裏",
  "五条悟",
  "ギロッポン",
  "チャンネー",
  "激落ち君",
  "スポポビッチ",
  "なんかんでん",
  "ザンギエフ",
  "ペチュニアおばさん",
  "マグル",
  "デュエマ",
  "ソウルシリーズ",
  "ゲリ便",
  "ビーチク",
  "ション",
  "ガガセト山",
  "レベル5デス",
  "回転剣舞",
  "八卦",
  "戸愚呂兄弟",
  "海王拳",
  "ヤードラット星人",
  "チョコザップ",
  "深夜の通販番組",
  "永久凍土",
  "IQ3",
  "ゾンビ映画",
  "ビッグウェーブ",
  "温泉饅頭",
  "焼き芋カー",
  "ハンドスピナー",
  "たまごサンド",
  "野菜スティック",
  "リアルポケモン",
  "キラキラネーム",
  "おしゃぶり昆布",
  "牛歩戦術",
  "ラーメン二郎インスパイア",
  "笑ってはいけない",
  "ベジータヘアー",
  "ダブルピース",
  "五目チャーハン",
  "地下アイドル",
  "絶滅危惧種",
  "賞味期限切れ",
  "最強の新人",
  "マトリョーシカ"
];

const HAND_ADVERB = [
  "くるくる回る",
  "ぶんぶん振り回す",
  "ころころ転がる",
  "がたがた揺れる",
  "廻る",
  "やり遂げた",
  "ずっとあこがれていた",
  "悲しみ",
  "ぼろぼろ",
  "バカみたい",
  "困ってる",
  "様々",
  "めちゃくちゃ",
  "全力疾走",
  "比較的新しい",
  "絶望的",
  "もっと",
  "やばい",
  "楽しい",
  "疲れる",
  "信じられない",
  "ちょっと臭う",
  "さらさら",
  "窮屈",
  "潔癖",
  "真面目",
  "大変",
  "大好き",
  "大嫌い",
  "ハンサム",
  "ダメ",
  "豪華",
  "丈夫",
  "愛くるしい",
  "あったかい",
  "あまずっぱい",
  "あられもない",
  "ありがたい",
  "意地汚い",
  "いじらしい",
  "勇ましい",
  "忌まわしい",
  "色っぽい",
  "鬱陶しい",
  "うらやましい",
  "エロい",
  "おこがましい",
  "大人げない",
  "女らしい",
  "かたい",
  "かわいい",
  "キモい",
  "規則正しい",
  "臭い",
  "狂おしい",
  "くどい",
  "汚らわしい",
  "けばけばしい",
  "香ばしい",
  "こどもっぽい",
  "騒がしい",
  "しおらしい",
  "慈悲深い",
  "しんどい",
  "しょっぱい",
  "図々しい",
  "素晴らしい",
  "せこい",
  "切ない",
  "ダルい",
  "高い",
  "小さい",
  "力強い",
  "つたない",
  "冷たい",
  "つまんない",
  "照れくさい",
  "でかい",
  "尊い",
  "ナウい",
  "とんでもない",
  "長ったらしい",
  "なつい",
  "生暖かい",
  "なれなれしい",
  "煮え切らない",
  "憎たらしい",
  "ぬるい",
  "根深い",
  "馬鹿馬鹿しい",
  "速い",
  "ばっちい",
  "恥ずかしい",
  "ぶっとい",
  "古めかしい",
  "細長い",
  "紛らわしい",
  "まずい",
  "みすぼらしい",
  "短い",
  "むごい",
  "難しい",
  "めんどくさい",
  "もったいない",
  "もろい",
  "物足りない",
  "優しい",
  "ややこしい",
  "やるせない",
  "ゆるい",
  "よそよそしい",
  "凛々しい",
  "礼儀正しい",
  "若い",
  "ぼっこぼこにされた",
  "バラバラになった",
  "苦しんでいる",
  "ここぞというとき",
  "心なしか小さく見える",
  "生まれ変わった",
  "平泳ぎをしながら",
  "たった一つ",
  "空飛ぶ",
  "地上に顔を出した",
  "フルマラソン後",
  "やけどしながら",
  "背中が燃えている",
  "草の中から出てきた",
  "宙返りを決めながら",
  "ぴょんぴょん飛び跳ねながら",
  "ただ",
  "苦し紛れ",
  "金に困った",
  "おもむろに",
  "もろとも",
  "まみれ",
  "住まう",
  "だだ漏れ",
  "むさ苦しい",
  "男らしい",
  "ストロング",
  "スーパー",
  "ミラクル",
  "ラブリー",
  "ミスター",
  "プリティ",
  "クレイジー",
  "クリーン",
  "ダーティ",
  "排他的",
  "デッド",
  "インテリ",
  "強面の",
  "痩せこけている",
  "腹黒い",
  "イケイケ",
  "究極の",
  "Sサイズ",
  "まぁまぁの",
  "すごく",
  "こっそり",
  "なぜか",
  "たまたま",
  "突然",
  "淡白",
  "堂々たる",
  "未熟",
  "陰湿",
  "野暮",
  "敏感",
  "不可解",
  "穏やか",
  "確実",
  "精密",
  "律儀",
  "微妙",
  "楽観的",
  "曖昧",
  "巧妙",
  "ずさん",
  "神経質",
  "短絡的",
  "刹那的",
  "お人好し",
  "性急",
  "精力的",
  "温厚",
  "高尚",
  "鮮烈",
  "魅惑的",
  "閉鎖的",
  "孤独",
  "高貴",
  "非情",
  "軽率",
  "怠惰",
  "抜け目ない",
  "無敵",
  "慎ましい",
  "鋭敏",
  "旺盛",
  "冷酷",
  "重厚",
  "格別",
  "豪胆",
  "真摯",
  "強烈",
  "粗雑",
  "端正",
  "好調",
  "本格的",
  "名高い",
  "神妙",
  "朗らか",
  "不潔",
  "根気強い",
  "勇敢",
  "独創的",
  "心細い",
  "安定した",
  "上品",
  "根強い",
  "進歩的",
  "風変わり",
  "実直",
  "柔軟",
  "無関心",
  "多弁",
  "情け深い",
  "機転が利く",
  "旺盛",
  "真剣",
  "物騒",
  "遊び心ある",
  "多彩",
  "個性的",
  "洗練された",
  "奔放",
  "正統派の",
  "破天荒",
  "知的",
  "客観的",
  "独特",
  "素直",
  "温和",
  "堂々とした",
  "画期的",
  "冷淡",
  "安易",
  "健全",
  "情熱的",
  "哀愁漂う",
  "静か",
  "優柔不断な",
  "無邪気",
  "衝動的",
  "懐かしい",
  "細やか",
  "芸術的",
  "誠実",
  "繊細",
  "勤勉",
  "明瞭",
  "迅速",
  "直情的",
  "冒険的",
  "野心的",
  "素肌感ある",
  "技巧的",
  "機能的",
  "コンパクト",
  "ワイルド",
  "フェミニン",
  "エキセントリック",
  "モダン",
  "クラシック",
  "スタイリッシュ",
  "ロマンチック",
  "シュール",
  "ユニーク",
  "ミステリアス",
  "フレッシュ",
  "生臭い",
  "鋭い",
  "滑らか",
  "地味",
  "異様",
  "派手",
  "崩れやすい",
  "軽い",
  "遅い",
  "重い",
  "険しい",
  "激しい",
  "鮮やか",
  "荒々しい",
  "高級",
  "穏やか",
  "粘っこい",
  "悪質",
  "柔らかい",
  "厚い",
  "薄い",
  "浅い",
  "深い",
  "丸い",
  "四角い",
  "狭い",
  "広い",
  "古い",
  "新しい",
  "白い",
  "黒い",
  "青い",
  "赤い",
  "黄色い",
  "珍しい",
  "たくましい",
  "まばゆい",
  "無口",
  "毒舌",
  "好戦的",
  "好奇心旺盛",
  "空想的",
  "自由奔放" 
];
const HAND_VERB = [
  "見せる",
  "ころがす",
  "疲れた",
  "楽しんだ",
  "思い出した",
  "転がった",
  "笑った",
  "戦った",
  "戦争した",
  "楽しんだ",
  "抗った",
  "ダブルクリックした",
  "もたついた",
  "奪取した",
  "叫んだ",
  "食べた",
  "ほころんだ",
  "微笑んだ",
  "書き込んだ",
  "飲み干した",
  "点滅した",
  "臭がった",
  "むしり取った",
  "ぶん殴った",
  "ぶっ飛ばした",
  "ぼっこぼこにした",
  "丸のみにした",
  "閉じ込めた",
  "混ぜた",
  "咀嚼した",
  "流した",
  "飛び跳ねた",
  "切った",
  "切断した",
  "付けた",
  "引っこ抜いた",
  "打ちぬいた",
  "一気飲みした",
  "愛でた",
  "なでなでした",
  "ペロッとした",
  "焼いた",
  "ちぎった",
  "剥いた",
  "割った",
  "走った",
  "発射した",
  "吐いた",
  "のぼった",
  "ひいた",
  "砕いた",
  "包まれた",
  "蹴った",
  "入れた",
  "外れた",
  "読み込んだ",
  "開いた",
  "濡らした",
  "切り刻んだ",
  "断裂した",
  "飾った",
  "ゆすった",
  "張り付いた",
  "こんがり焼いた",
  "配った",
  "蔓延した",
  "刺された",
  "渡った",
  "プルプルした",
  "燃えた",
  "燃やした",
  "刺した",
  "モフモフした",
  "治った",
  "突き詰めた",
  "やっつけた",
  "ドキドキした",
  "わくわくした",
  "ときめいた",
  "なめまわした",
  "切り取った",
  "膨れ上がった",
  "ぶっ潰した",
  "捕まえた",
  "ぶっこわれた",
  "いちゃいちゃした",
  "泣きわめいた",
  "回した",
  "もぎ取った",
  "照らした",
  "受け入れた",
  "かいた",
  "隠れた",
  "うやまう",
  "読みふける",
  "正す",
  "いさめる",
  "なぐさめる",
  "スーッと滑る",
  "塗りたくる",
  "浮き上がる",
  "ぶっ殺す",
  "抹殺する",
  "殺害する",
  "ぶん殴る",
  "蹴っ飛ばす",
  "吹っ飛ばす",
  "撫でまわす",
  "抱きしめる",
  "ほじくる",
  "子供らしく振舞う",
  "炸裂する",
  "ゆでる",
  "発射する",
  "まるめる",
  "生い茂る",
  "土に潜る",
  "ぶっ壊す",
  "すする",
  "味見する",
  "置いていく",
  "たたき伏せる",
  "絞める",
  "ぼろぼろにする",
  "切りつける",
  "回転する",
  "接吻する",
  "PLAYする",
  "ゴマをする",
  "投げ飛ばす",
  "歩く",
  "散歩する",
  "改造する",
  "串焼きにする",
  "退治する",
  "乗り込む",
  "かばう",
  "一刀両断する",
  "いさめる",
  "慰める",
  "だっこする",
  "たたき落とす",
  "食べさせる",
  "ジャンプする",
  "よじ登る",
  "揺さぶる",
  "絞める",
  "抱きしめる",
  "チェックする",
  "丸かじりする",
  "たしなむ",
  "たのしむ",
  "食べる",
  "吐き出す",
  "ボコる",
  "使役する",
  "乱入する",
  "見せつける",
  "やりこむ",
  "体験する",
  "名乗る",
  "捧げる",
  "轟かせる",
  "ゲラゲラ笑う",
  "ニヤニヤする",
  "する",
  "した",
  "させた",
  "させる",
  "踊る",
  "歌う",
  "踊りだす",
  "大はしゃぎ",
  "歌い出した",
  "踊りだした",
  "繰り出す",
  "投げつける",
  "ファイトする",
  "握手する",
  "分かち合う",
  "ぶっかける",
  "復讐する",
  "シャウトした",
  "言及する",
  "へし折る",
  "ぶち抜く",
  "ぶち壊す",
  "お願いする",
  "懇願する",
  "お願いした",
  "懇願した",
  "勝どきをあげる",
  "往復ビンタする",
  "語り合った",
  "語りあう",
  "こする",
  "かける",
  "ぎゅうぎゅうに詰めた",
  "唱える",
  "お祈りする",
  "差し出した",
  "感謝した",
  "ドア閉める",
  "帰らせた",
  "激怒した",
  "帰らせる",
  "マジギレする",
  "攻撃する",
  "攻撃した",
  "出番がなかった",
  "断る",
  "遠慮する",
  "放送される",
  "放送された",
  "飼う",
  "悟った",
  "上回る",
  "入力する",
  "言葉にした",
  "見定める",
  "差し入れした",
  "録音した",
  "叫ぶ",
  "ぼこした",
  "ぶっとばした",
  "抹殺した",
  "蘇生した",
  "頑張った",
  "ひと吹きで飛んで行った",
    "盗んだ",
  "拾った",
  "ぶら下げた",
  "転倒した",
  "怒鳴った",
  "咳き込んだ",
  "跳ね返した",
  "見逃した",
  "暴れた",
  "散らかした",
  "倒れた",
  "助けた",
  "裏切った",
  "隠蔽した",
  "仕掛けた",
  "逃亡した",
  "捕縛した",
  "押し付けた",
  "脱走した",
  "放り投げた",
  "招待した",
  "奪い合った",
  "操った",
  "憧れた",
  "ねじ込んだ",
  "待ち伏せした",
  "反省した",
  "噴き出した",
  "びびった",
  "滑り込んだ",
  "泣き寝入りした",
  "埋めた",
  "呪った",
  "縛った",
  "巻き込まれた",
  "描いた",
  "積み上げた",
  "追い出した",
  "逆転した",
  "溺れた",
  "噛み締めた",
  "飽きた",
  "振り切った",
  "繋がった",
  "脱いだ",
  "逆らった",
  "受け流した",
  "殴り合った",
  "突っ込んだ",
  "背負った",
  "抱えた",
  "投げる",
  "叫ぶ",
  "呟く",
  "滑る",
  "繋げる",
  "引っぱる",
  "あざ笑う",
  "祝う",
  "ごまかす",
  "暴れる",
  "泳ぐ",
  "崩す",
  "よじれる",
  "通報する",
  "装う",
  "そそのかす",
  "許す",
  "呪う",
  "疑う",
  "褒める",
  "計算する",
  "そっとする",
  "崇拝する",
  "切り裂く",
  "いじる",
  "まねる",
  "誘惑する",
  "浮かれる",
  "たくらむ",
  "探す",
  "裏切る",
  "感動する",
  "見破る",
  "脅かす",
  "書きなぐる",
  "握る",
  "駆け込む",
  "変身する",
  "片付ける",
  "反論する",
  "踊らせる",
  "走り抜ける",
  "使い果たす",
  "運ぶ",
  "祝福する",
  "くすぐる",
  "呆れる",
  "なめる",
  "背負う",
  "やり過ごす",
  "溶かす",
  "仕切る",
  "抱える"
];
const PARTICLES = ["に", "は", "を", "が", "の", "へ", "と", "より", "から", "で", "だ", "な", "？", "!"];

function randomFromArray(arr, n) {
  const a = [...arr];
  let r = [];
  while (r.length < n && a.length) {
    const i = Math.floor(Math.random() * a.length);
    r.push(a.splice(i, 1)[0]);
  }
  return r;
}

app.post('/api/rooms', async (req, res) => {
  const { roomName, hostName, ownerUid } = req.body;
  const roomId = randomId(8);
  await db.collection('rooms').doc(roomId).set({
    roomName,
    started: false,
    phase: 'waiting',
    round: 1,
    roundMax: 5,
    createdAt: Date.now(),
    ownerUid: ownerUid // ★追加
  });
  const userId = randomId(16);
  await db.collection('users').doc(userId).set({
    roomId,
    userName: hostName,
    isHost: true,
    points: 0,
    hand: [],
    usedParticle: null
  });
  res.json({ roomId, userId });
});

app.get('/api/rooms/list', async (req, res) => {
  const snap = await db.collection('rooms').get();
  const arr = [];
  snap.forEach(doc => arr.push({ id: doc.id, ...doc.data() }));
  res.json(arr);
});

app.post('/api/rooms/:roomId/join', async (req, res) => {
  const { userName } = req.body;
  const userId = randomId(16);
  await db.collection('users').doc(userId).set({
    roomId: req.params.roomId, userName, isHost: false, points: 0, hand: [], usedParticle: null
  });
  res.json({ userId });
});

app.post('/api/rooms/:roomId/start', async (req, res) => {
  const roomId = req.params.roomId;
  await db.collection('rooms').doc(roomId).update({
    started: true, phase: 'theme_vote', round: 1
  });
  const userSnap = await db.collection('users').where('roomId', '==', roomId).get();
  for (const u of userSnap.docs) {
    const hand = [
      ...randomFromArray(HAND_GENERAL, 4),
      ...randomFromArray(HAND_FUNNY, 2),
      ...randomFromArray(HAND_ADVERB, 2),
      ...randomFromArray(HAND_VERB, 3)
    ];
    await db.collection('users').doc(u.id).update({ hand, usedParticle: null });
  }
  const themes = randomFromArray(THEMES, 6);
  await db.collection('rounds').doc(`${roomId}_1`).set({
    round: 1, roomId, themes, themeVotes: {}, theme: "", answers: {}, votes: {}, answerRevealOrder: [], result: {}
  });
  res.json({ ok: true });
});

app.post('/api/rooms/:roomId/rounds/:round/theme-vote', async (req, res) => {
  const { userId, themeIndex } = req.body;
  const roundDoc = db.collection('rounds').doc(`${req.params.roomId}_${req.params.round}`);
  await roundDoc.update({ [`themeVotes.${userId}`]: themeIndex });
  res.json({ ok: true });
});

app.post('/api/rooms/:roomId/rounds/:round/answer-reveal', async (req, res) => {
  const roundId = `${req.params.roomId}_${req.params.round}`;
  const roundRef = db.collection('rounds').doc(roundId);
  const round = (await roundRef.get()).data();
  const votes = round.themeVotes || {};
  const themes = round.themes || [];
  const counts = Array(themes.length).fill(0);
  Object.values(votes).forEach(idx => { if (typeof idx === "number") counts[idx]++; });
  let max = Math.max(...counts);
  let candidateIdxs = counts.map((c, i) => c === max ? i : -1).filter(i => i >= 0);
  let themeIndex = candidateIdxs[0];
  for (const uid of Object.keys(votes)) {
    if (candidateIdxs.includes(votes[uid])) { themeIndex = votes[uid]; break; }
  }
  const theme = themes[themeIndex] || themes[0] || "";
  await roundRef.update({ theme });
  await db.collection('rooms').doc(req.params.roomId).update({ phase: 'theme_reveal' });
  res.json({ ok: true });
});

app.post('/api/rooms/:roomId/rounds/:round/answer-phase', async (req, res) => {
  await db.collection('rooms').doc(req.params.roomId).update({ phase: 'answer' });
  res.json({ ok: true });
});

app.post('/api/rooms/:roomId/rounds/:round/answer', async (req, res) => {
  const { userId, answer, usedWords } = req.body;
  const roundId = `${req.params.roomId}_${req.params.round}`;
  const roundRef = db.collection('rounds').doc(roundId);
  await roundRef.update({ [`answers.${userId}`]: { answer, usedWords } });

  // 自動進行：全員が回答したらフェーズ遷移
  const room = (await db.collection('rooms').doc(req.params.roomId).get()).data();
  const userSnap = await db.collection('users').where('roomId', '==', req.params.roomId).get();
  const totalPlayers = userSnap.docs.length;
  const round = (await roundRef.get()).data();
  if (Object.keys(round.answers||{}).length === totalPlayers) {
    // ホストのリクエスト時のみ遷移
    for (const u of userSnap.docs) {
      if (u.data().isHost) {
        await db.collection('rooms').doc(req.params.roomId).update({ phase: 'answer_reveal' });
        // 回答順ランダム生成
        const answerOrder = Object.keys(round.answers || {});
        for (let i = answerOrder.length - 1; i > 0; i--) {
          const j = Math.floor(Math.random() * (i + 1));
          [answerOrder[i], answerOrder[j]] = [answerOrder[j], answerOrder[i]];
        }
        await roundRef.update({ answerRevealOrder: answerOrder });
        break;
      }
    }
  }
  res.json({ ok: true });
});

app.post('/api/users/:userId/particle', async (req, res) => {
  const { usedParticle } = req.body;
  await db.collection('users').doc(req.params.userId).update({ usedParticle });
  res.json({ ok: true });
});

// ポイントリセット
app.post('/api/users/:userId', async (req, res) => {
  const { points } = req.body;
  await db.collection('users').doc(req.params.userId).update({ points });
  res.json({ ok: true });
});

// allチェンジAPI
app.post('/api/users/:userId/hand', async (req, res) => {
  const { changeType, cardIdx, keepIdx } = req.body;
  const userRef = db.collection('users').doc(req.params.userId);
  const user = (await userRef.get()).data();
  let hand = [...user.hand];
  if (changeType === "one" && typeof cardIdx === "number" && cardIdx >= 0 && cardIdx < hand.length) {
    let newCard = "";
    if (cardIdx < 4) newCard = randomFromArray(HAND_GENERAL, 1)[0];
    else if (cardIdx < 6) newCard = randomFromArray(HAND_FUNNY, 1)[0];
    else if (cardIdx == 6) newCard = randomFromArray(HAND_ADVERB, 1)[0];
    else newCard = randomFromArray(HAND_VERB, 1)[0];
    hand[cardIdx] = newCard;
    await userRef.update({ hand });
    res.json({ ok: true, hand });
  } else if (changeType === "all") {
    let newHand = [
      ...randomFromArray(HAND_GENERAL, 4),
      ...randomFromArray(HAND_FUNNY, 2),
      ...randomFromArray(HAND_ADVERB, 2),
      ...randomFromArray(HAND_VERB, 3)
    ];
    if (Array.isArray(keepIdx)) {
      for (let i = 0; i < hand.length; ++i) {
        if (keepIdx.includes(i)) newHand[i] = hand[i];
      }
    }
    await userRef.update({ hand: newHand });
    res.json({ ok: true, hand: newHand });
  } else {
    res.status(400).json({ error: "Invalid request" });
  }
});

app.post('/api/rooms/:roomId/rounds/:round/answer-reveal-phase', async (req, res) => {
  const roundId = `${req.params.roomId}_${req.params.round}`;
  const round = (await db.collection('rounds').doc(roundId).get()).data();
  const answerOrder = Object.keys(round.answers || {});
  for (let i = answerOrder.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [answerOrder[i], answerOrder[j]] = [answerOrder[j], answerOrder[i]];
  }
  await db.collection('rounds').doc(roundId).update({ answerRevealOrder: answerOrder });
  await db.collection('rooms').doc(req.params.roomId).update({ phase: 'answer_reveal' });
  res.json({ ok: true });
});

app.post('/api/rooms/:roomId/rounds/:round/vote-phase', async (req, res) => {
  await db.collection('rooms').doc(req.params.roomId).update({ phase: 'vote' });
  res.json({ ok: true });
});

app.post('/api/rooms/:roomId/rounds/:round/vote', async (req, res) => {
  const { userId, voteForUserId } = req.body;
  const roundRef = db.collection('rounds').doc(`${req.params.roomId}_${req.params.round}`);
  await roundRef.update({ [`votes.${userId}`]: voteForUserId });
  res.json({ ok: true });
});

app.post('/api/rooms/:roomId/rounds/:round/result-phase', async (req, res) => {
  const roundId = `${req.params.roomId}_${req.params.round}`;
  const roundRef = db.collection('rounds').doc(roundId);
  const round = (await roundRef.get()).data();
  if (round.result && Object.keys(round.result).length > 0) {
    return res.json({ ok: true, already: true });
  }
  
  const votes = round.votes || {};
  let cnts = {};
  Object.values(votes).forEach(uid => {
    if (!cnts[uid]) cnts[uid] = 0;
    cnts[uid]++;
  });
  await roundRef.update({ result: cnts });

  // ポイント加算（得票最多→全員1ptに修正）
  const maxVote = Math.max(...Object.values(cnts), 0);
  const winners = Object.entries(cnts).filter(([k,v]) => v === maxVote).map(([k])=>k);
  const userSnap = await db.collection('users').where('roomId', '==', req.params.roomId).get();
  for (const u of userSnap.docs) {
    let p = u.data().points || 0;
    if (winners.includes(u.id)) p += 1;
    await db.collection('users').doc(u.id).update({ points: p });
  }
  await db.collection('rooms').doc(req.params.roomId).update({ phase: 'result' });
  res.json({ ok: true });
});

app.post('/api/rooms/:roomId/next', async (req, res) => {
  const room = (await db.collection('rooms').doc(req.params.roomId).get()).data();
  let round = room.round + 1;
  if (round > room.roundMax) {
    await db.collection('rooms').doc(req.params.roomId).update({ phase: 'end' });
    return res.json({ ok: true });
  }
  await db.collection('rooms').doc(req.params.roomId).update({ phase: 'theme_vote', round });
  // 手札・usedParticleリセット
  const userSnap = await db.collection('users').where('roomId', '==', req.params.roomId).get();
  for (const u of userSnap.docs) {
    const hand = [
      ...randomFromArray(HAND_GENERAL, 4),
      ...randomFromArray(HAND_FUNNY, 2),
      ...randomFromArray(HAND_ADVERB, 2),
      ...randomFromArray(HAND_VERB, 3)
    ];
    await db.collection('users').doc(u.id).update({ hand, usedParticle: null });
  }
  // 新ラウンド
  const themes = randomFromArray(THEMES, 6);
  await db.collection('rounds').doc(`${req.params.roomId}_${round}`).set({
    round, roomId: req.params.roomId, themes, themeVotes: {}, theme: "", answers: {}, votes: {}, answerRevealOrder: [], result: {}
  });
  res.json({ ok: true });
});

// ▼▼▼【再戦エンドポイント（完全リセット）】▼▼▼
app.post('/api/rooms/:roomId/restart', async (req, res) => {
  const roomId = req.params.roomId;

  // 1. ルーム状態リセット
  await db.collection('rooms').doc(roomId).update({
    phase: 'theme_vote',
    round: 1,
    started: true
  });

  // 2. 全ユーザーのポイント・手札・助詞リセット
  const userSnap = await db.collection('users').where('roomId', '==', roomId).get();
  for (const u of userSnap.docs) {
    const hand = [
      ...randomFromArray(HAND_GENERAL, 4),
      ...randomFromArray(HAND_FUNNY, 2),
      ...randomFromArray(HAND_ADVERB, 2),
      ...randomFromArray(HAND_VERB, 3)
    ];
    await db.collection('users').doc(u.id).update({ points: 0, hand, usedParticle: null });
  }

  // 3. 全ラウンド削除
  const roundsSnap = await db.collection('rounds').where('roomId', '==', roomId).get();
  const batch = db.batch();
  roundsSnap.docs.forEach(doc => batch.delete(doc.ref));
  await batch.commit();

  // 4. 新ラウンド1生成
  const themes = randomFromArray(THEMES, 6);
  await db.collection('rounds').doc(`${roomId}_1`).set({
    round: 1, roomId, themes, themeVotes: {}, theme: "", answers: {}, votes: {}, answerRevealOrder: [], result: {}
  });

  res.json({ ok: true });
});
// ▲▲▲【再戦エンドポイントここまで】▲▲▲

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log('Server started on http://localhost:' + PORT);
});
